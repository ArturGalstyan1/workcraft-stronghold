package views

import (
	"encoding/json"
	"github.com/Artur-Galstyan/workcraft-stronghold/models"
	"github.com/Artur-Galstyan/workcraft-stronghold/views/layout"
)

templ Task(task models.Task) {
	@layout.Base() {
		@templ.JSONScript("taskID", task.ID)
		<script defer>
		const taskID = JSON.parse(document.getElementById('taskID').innerText);
		console.log('Task ID:', taskID);
		const sse = window.getSSE();
		sse.onopen = function() {
			console.log('Connected');
		};

		sse.onmessage = function(e) {
			const data = JSON.parse(e.data);
			if (data.type === 'task_update' && data.message.task.id === taskID) {
				updateTask(data.message.task);
			}
		};

		sse.onerror = function(error) {
			console.error('WebSocket error:', error);
		};

		function updateTask(task) {
			// Update status with color coding
			const statusEl = document.getElementById('task-status');
			statusEl.textContent = task.status;
			statusEl.className = `px-2 py-1 rounded-full text-sm inline-block ${getStatusColor(task.status)}`;

			// Update timestamps
			if (task.created_at) {
				document.getElementById('created-at').textContent = formatDateTime(task.created_at);
			}
			if (task.updated_at) {
				document.getElementById('updated-at').textContent = formatDateTime(task.updated_at);
			}

			// Update queue
			document.getElementById('queue').textContent = task.queue || 'DEFAULT';

			// Update retries
			document.getElementById('retry-count').textContent = `${task.retry_count} / ${task.retry_limit}`;

			// Update peon link
			const peonEl = document.getElementById('peon-link');
			if (task.peon_id) {
				peonEl.href = `/peon/${task.peon_id}`;
				peonEl.textContent = task.peon_id;
				peonEl.className = 'text-blue-600 hover:underline';
			} else {
				peonEl.removeAttribute('href');
				peonEl.textContent = 'No peon assigned';
				peonEl.className = 'text-gray-500';
			}

			// Update result
			const resultEl = document.getElementById('result');
			if (task.result) {
				resultEl.textContent = JSON.stringify(task.result, null, 2);
				resultEl.className = 'font-mono text-sm bg-gray-100 p-4 rounded-lg overflow-auto max-h-96';
			} else {
				resultEl.textContent = 'No result';
				resultEl.className = 'text-gray-500';
			}
			const payloadEl = document.getElementById('payload');
			if (task.payload) {
				payloadEl.textContent = JSON.stringify(task.payload, null, 2);
				payloadEl.className = 'font-mono text-sm bg-gray-100 p-4 rounded-lg overflow-auto max-h-96';
			} else {
				payloadEl.textContent = 'No payload';
				payloadEl.className = 'text-gray-500';
			}

			// Update logs
			const logsEl = document.getElementById('task-logs');
			logsEl.textContent = task.logs || 'No logs';

		}


		function formatDateTime(dateString) {
			return new Date(dateString).toLocaleString('en-US', {
				year: 'numeric',
				month: '2-digit',
				day: '2-digit',
				hour: '2-digit',
				minute: '2-digit',
				second: '2-digit'
			});
		}

		async function pollTaskData() {
			try {
				const response = await fetch(`/api/task/${taskID}`);
				if (!response.ok) throw new Error('Failed to fetch task data');

				const task = await response.json();

				updateTask(task);
			} catch (error) {
				console.error('Error polling task data:', error);
			}
		}

		$(document).ready(function() {
			console.log('Document ready');
			pollTaskData();
			setInterval(pollTaskData, 5000);
		});

		async function cancelTask() {
			try {
				const response = await fetch(`/api/task/${taskID}/cancel`, { method: 'POST' });
				if (!response.ok) throw new Error(await response.text());
				const data = await response.json();
				console.log('Task cancelled:', data);
				window.Toast.fire({
					icon: "success",
					title: "Cancelled task!"
				});
			} catch (error) {
				console.error('Error cancelling task:', error);
				window.Toast.fire({
					icon: "error",
					title: "Failed to cancel task: " + error.message
				});
			}
		}
		async function deleteTask() {
			try {
				const response = await fetch(`/api/task/${taskID}/delete`, { method: 'DELETE' });
				if (!response.ok) throw new Error(await response.text());
				window.Toast.fire({
					icon: "success",
					title: "Deleted task!"
				}).then(() => {
				    window.location.href = "/tasks"
				})
			} catch (error) {
				console.error('Error deleting task:', error);
				window.Toast.fire({
					icon: "error",
					title: "Failed to delete task: " + error.message
				});
			}
		}
		</script>
		<div class="max-w-4xl mx-auto p-6">
			<!-- Task Status Card -->
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
				<h1 class="text-2xl font-bold mb-6 text-gray-700">Task Details</h1>
				<div class="grid gap-6 md:grid-cols-2">
					<div class="space-y-4">
						<div class="flex items-center gap-2">
							<span class="font-medium text-gray-600">ID:</span>
							<span class="font-mono text-sm">{ task.ID }</span>
						</div>
						<div class="flex items-center gap-2">
							<span class="font-medium text-gray-600">Name:</span>
							<span class="text-gray-700">{ task.TaskName }</span>
						</div>
						<div class="flex items-center gap-2">
							<span class="font-medium text-gray-600">Status:</span>
							<span id="task-status" class={ `px-2 py-1 rounded-full text-sm inline-block ${window.getStatusColor(string(task.Status))}` }>
								{ string(task.Status) }
							</span>
						</div>
					</div>
					<div class="space-y-4">
						<div class="flex items-center gap-2">
							<span class="font-medium text-gray-600">Created:</span>
							<span id="created-at" class="text-gray-600">Loading...</span>
						</div>
						<div class="flex items-center gap-2">
							<span class="font-medium text-gray-600">Updated:</span>
							<span id="updated-at" class="text-gray-600">Loading...</span>
						</div>
						<div class="flex items-center gap-2">
							<span class="font-medium text-gray-600">Queue:</span>
							<span id="queue" class="text-gray-600">Loading...</span>
						</div>
					</div>
				</div>
				<div class="mt-6 space-y-4">
					<div class="flex items-center gap-2">
						<span class="font-medium text-gray-600">Assigned Peon:</span>
						<a id="peon-link" class="text-gray-500">Loading...</a>
					</div>
					<div class="flex items-center gap-2">
						<span class="font-medium text-gray-600">Retries:</span>
						<span id="retry-count" class="text-gray-600">Loading...</span>
					</div>
				</div>
			</div>
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
				<h2 class="text-xl font-bold mb-6 text-gray-700">Task Payload</h2>
				<pre id="payload" class="font-mono text-sm bg-gray-100 p-4 rounded-lg overflow-auto max-h-96">Loading...</pre>
			</div>
			<!-- Task Result -->
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
				<h2 class="text-xl font-bold mb-6 text-gray-700">Task Result</h2>
				<pre id="result" class="text-gray-500">
					if task.Result != nil {
						if resultBytes, err := json.Marshal(task.Result); err == nil {
							{ string(resultBytes) }
						} else {
							"Error displaying result"
						}
					} else {
						"No result"
					}
				</pre>
			</div>
			<!-- Task Logs -->
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mt-8">
				<h2 class="text-xl font-bold mb-6 text-gray-700">Task Logs</h2>
				<div class="overflow-auto max-h-96">
					<pre
						id="task-logs"
						class="font-mono text-sm text-gray-500"
					>Logs will be displayed here...</pre>
				</div>
			</div>
			<div class="flex my-8 space-x-4">
				@CloneTaskModal()
				<button
					onclick="cancelTask()"
					class="btn btn-warning"
				>
					Cancel Task
				</button>
				<button
					onclick="deleteTask()"
					class="btn btn-error"
				>
					Delete Task
				</button>
			</div>
		</div>
	}
}
