package views

import "github.com/Artur-Galstyan/workcraft-stronghold/views/layout"

templ Peon(peonID string) {
	@layout.Base() {
		@templ.JSONScript("peonID", peonID)
		<script defer>

		const peonID = JSON.parse(document.getElementById('peonID').innerText);
		console.log('Peon ID:', peonID);
		const sse = window.getSSE();
		sse.onopen = function() {
			console.log('Connected');
		};
		sse.onmessage = function(e) {
			const data = JSON.parse(e.data);
			if (data.type === 'peon_update' && data.message.peon.id === peonID) {
				setPeon(data.message.peon);
			}
		};
		sse.onerror = function(error) {
			console.error('WebSocket error:', error);
		};


		function setPeon(peon) {
			// Update status with color coding
			const statusEl = document.getElementById('peon-status');
			statusEl.textContent = peon.status;
			statusEl.className = `px-2 py-1 rounded-full text-sm inline-block ${
				peon.status === 'IDLE' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
				}`;

			// Format and set timestamp
			const timestamp = new Date(peon.last_heartbeat)
				.toLocaleString('en-US', {
					year: 'numeric',
					month: '2-digit',
					day: '2-digit',
					hour: '2-digit',
					minute: '2-digit',
					second: '2-digit'
				});
			document.getElementById('peon-heartbeat').textContent = timestamp;

			// Update queues
			document.getElementById('peon-queues').textContent =
				Array.isArray(peon.queues) ? peon.queues.join(', ') : peon.queues;

			// Update current task
			const taskEl = document.getElementById('peon-currenttask');
			if (peon.current_task) {
				taskEl.href = `/task/${peon.current_task}`;
				taskEl.textContent = peon.current_task;
				taskEl.className = 'text-blue-600 hover:underline';
			} else {
				taskEl.removeAttribute('href');
				taskEl.textContent = 'No active task';
				taskEl.className = 'text-gray-500';
			}
		}

		function updateTaskHistory(tasks) {
			const tbody = document.getElementById('task-history');
			tbody.innerHTML = '';

			if (tasks.length === 0) {
				const row = document.createElement('tr');
				row.innerHTML = `
					<td colspan="2" class="text-center py-4 text-gray-500">
					No task history available
					</td>
					`;
				tbody.appendChild(row);
				return;
			}

			tasks.forEach(task => {
				const row = document.createElement('tr');
				row.className = 'hover:bg-gray-50';
				row.innerHTML = `
					<td class="px-4 py-3 border-b">
					<a href="/task/${task.id}" class="text-blue-600 hover:underline">
					${task.id}
					</a>
					</td>
					<td class="px-4 py-3 border-b">${task.task_name}</td>
					<td class="px-4 py-3 border-b">
					<span class="px-2 py-1 rounded-full text-sm inline-block ${
					window.getStatusColor(task.status)
					}">
					${task.status}
					</span>
					</td>
					`;
				tbody.appendChild(row);
			});
		}

		let peonExists = true;

		async function pollPeonData() {
			if (!peonExists) return;
			try {
				const response = await fetch(`/api/peon/${peonID}`);
				if (!response.ok)
					{
						if (response.status === 404) {
							if (peonExists) {
								console.error('Peon not found');
								peonExists = false;
								document.getElementById('peon-status').textContent = 'Not found';
								document.getElementById('peon-status').className = 'px-2 py-1 rounded-full text-sm bg-red-100 text-red-800';

								document.getElementById('peon-heartbeat').textContent = 'N/A';
								document.getElementById('peon-queues').textContent = 'N/A';
								document.getElementById('peon-currenttask').textContent = 'N/A';
							}
							return;
						}
						throw new Error('Failed to fetch peon data');

					}
				const peon = await response.json();
				setPeon(peon);
			} catch (error) {
				console.error('Error polling peon data:', error);
			}
		}

		async function pollTaskHistory() {
			try {
				const response = await fetch(`/api/peon/${peonID}/tasks`);
				if (!response.ok) throw new Error('Failed to fetch task history');
				const tasks = await response.json();
				updateTaskHistory(tasks);
				document.getElementById('table-wrapper').classList.remove('animate-pulse');
			} catch (error) {
				console.error('Error polling task history:', error);
			}
		}

		$(document).ready(function() {
			console.log('Document ready');
			pollPeonData();
			pollTaskHistory();

			setInterval(pollPeonData, 5000);
			setInterval(pollTaskHistory, 5000);
		});

		</script>
		<div class="max-w-4xl mx-auto p-6">
			<!-- Peon Status Card -->
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
				<h1 class="text-2xl font-bold mb-6 text-gray-700">Peon Status</h1>
				<div class="grid gap-4 md:grid-cols-2">
					<div class="space-y-4">
						<div class="flex items-center gap-2">
							<span class="font-medium">ID:</span>
							<span class="font-mono text-sm">{ peonID }</span>
						</div>
						<div class="flex items-center gap-2">
							<span class="font-medium">Status:</span>
							<span id="peon-status" class="px-2 py-1 rounded-full text-sm bg-gray-100">
								Loading...
							</span>
						</div>
					</div>
					<div class="space-y-4">
						<div class="flex items-center gap-2">
							<span class="font-medium">Last Heartbeat:</span>
							<span id="peon-heartbeat" class="text-gray-600">Loading...</span>
						</div>
						<div class="flex items-center gap-2">
							<span class="font-medium">Queues:</span>
							<span id="peon-queues" class="text-gray-600">Loading...</span>
						</div>
					</div>
				</div>
				<div class="mt-4">
					<span class="font-medium">Current Task:</span>
					<a id="peon-currenttask" class="ml-2 text-gray-500">
						Loading...
					</a>
				</div>
			</div>
			<!-- Task History -->
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6">
				<h2 class="text-xl font-bold mb-6 text-gray-700">Task History</h2>
				<div id="table-wrapper" class="overflow-x-auto animate-pulse">
					<table class="min-w-full">
						<thead class="bg-gray-100">
							<tr>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Task ID
								</th>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Task Name
								</th>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Status
								</th>
							</tr>
						</thead>
						<tbody id="task-history" class="divide-y divide-gray-200">
							<tr>
								<td colspan="2" class="text-center py-4 text-gray-500">
									Loading...
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
}
