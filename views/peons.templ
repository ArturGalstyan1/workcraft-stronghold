package views

import "github.com/Artur-Galstyan/workcraft-stronghold/views/layout"

templ Peons() {
	@layout.Base() {
		<script defer>
        let totalPages = 0;
        let currentPage = 0;

        const sse = window.getSSE();

        console.log('No SSE, reconnecting');

        sse.onopen = function() {
            console.log('Connected');
        };

        sse.onmessage = function(e) {
            console.log(e)
            const data = JSON.parse(e.data);
            if (data.type === 'peon_update') {
                // Update single row in the table
                updatePeonRow(data.message.peon);
            }
        };
        sse.onerror = function(error) {
            console.error('WebSocket error:', error);
        };


        function updatePeonRow(peon) {
            const row = document.getElementById(`peon-${peon.id}`);
            if (!row) {
                return; // Don't trigger a refresh, let the normal polling handle it
            }

            const timestamp = new Date(peon.last_heartbeat)
                .toLocaleString('en-US', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });


            let currTask = peon.current_task ?
            `<a href="/task/${peon.current_task}" class="text-blue-600 hover:underline">
            ${peon.current_task}
            </a>` :
            '<span class="text-gray-500">No active task</span>'

            row.innerHTML = `
                <td class="px-4 py-3 border-b">
                <a href="/peon/${peon.id}" class="text-blue-600 hover:underline">
                ${peon.id}
                </a>
                </td>
                <td class="px-4 py-3 border-b">
                <span class="px-2 py-1 rounded-full text-sm inline-block ${
                peon.status === 'IDLE' ? 'bg-green-100 text-green-800' :
                peon.status === 'OFFLINE' ? 'bg-gray-100 text-gray-800' :
                'bg-yellow-100 text-yellow-800'
                }">
                ${peon.status}
                </span>
                </td>
                <td class="px-4 py-3 border-b">${timestamp}</td>
                <td class="px-4 py-3 border-b">${peon.queues || 'DEFAULT'}</td>
                <td class="px-4 py-3 border-b">
                ${currTask}
                </td>
                `;
        }

        function updatePeonTable(peons) {
            const tbody = document.getElementById('peons-table');
            tbody.innerHTML = '';

            if (peons.length === 0) {
                tbody.innerHTML = `
                    <tr>
                    <td colspan="5" class="text-center py-4 text-gray-500">
                    No peons found
                    </td>
                    </tr>
                    `;
                return;
            }

            peons.forEach(peon => {
                const row = document.createElement('tr');
                row.id = `peon-${peon.id}`;
                row.className = 'hover:bg-gray-50';

                // Instead of calling updatePeonRow, set the innerHTML directly
                const timestamp = new Date(peon.last_heartbeat)
                    .toLocaleString('en-US', {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit'
                    });


                let currTask =
                  peon.current_task ?
                  `<a href="/task/${peon.current_task}" class="text-blue-600 hover:underline">
                  ${peon.current_task}</a>` : '<span class="text-gray-500">No active task</span>'

                row.innerHTML = `
                    <td class="px-4 py-3 border-b">
                    <a href="/peon/${peon.id}" class="text-blue-600 hover:underline">
                    ${peon.id}
                    </a>
                    </td>
                    <td class="px-4 py-3 border-b">
                    <span class="px-2 py-1 rounded-full text-sm inline-block ${
                    peon.status === 'IDLE' ? 'bg-green-100 text-green-800' :
                    peon.status === 'OFFLINE' ? 'bg-gray-100 text-gray-800' :
                    'bg-yellow-100 text-yellow-800'
                    }">
                    ${peon.status}
                    </span>
                    </td>
                    <td class="px-4 py-3 border-b">${timestamp}</td>
                    <td class="px-4 py-3 border-b">${peon.queues || 'DEFAULT'}</td>
                    <td class="px-4 py-3 border-b">
                    ${currTask}
                    </td>
                    `;
                tbody.appendChild(row);
            });
        }

        async function pollPeonData() {
            try {
                const queryParams = new URLSearchParams(window.location.search);
                currentPage = parseInt(queryParams.get('page')) || 0;

                const query = {
                    page: currentPage,
                    per_page: parseInt(queryParams.get('per_page')) || 30,
                    order: {
                        field: queryParams.get('sort') || 'last_heartbeat',
                        dir: queryParams.get('dir') || 'DESC'
                    }
                };

                const response = await fetch(`/api/peons?query=${JSON.stringify(query)}`);
                if (!response.ok) throw new Error('Failed to fetch peon data');
                const data = await response.json();
                totalPages = data.total_pages;
                updatePeonTable(data.items);
                updatePaginationButtons();
            } catch (error) {
                console.error('Error polling peon data:', error);
            }
        }

        function updatePaginationButtons() {
            const prevButton = document.querySelector('button[onclick="prevPage()"]');
            const nextButton = document.querySelector('button[onclick="nextPage()"]');

            if (prevButton) {
                prevButton.disabled = currentPage <= 0;
            }
            if (nextButton) {
                nextButton.disabled = currentPage >= totalPages - 1;
            }
        }

        async function joinPage(page) {
            if (page < 0 || page >= totalPages) {
                return;
            }

            const queryParams = new URLSearchParams(window.location.search);
            queryParams.set('page', page);

            // Update URL without page refresh
            window.history.pushState(
                { page },
                '',
                `${window.location.pathname}?${queryParams.toString()}`
            );

            currentPage = page;
            await pollPeonData();
        }

        async function prevPage() {
            if (currentPage > 0) {
                await joinPage(currentPage - 1);
            }
        }

        async function nextPage() {
            if (currentPage < totalPages - 1) {
                await joinPage(currentPage + 1);
            }
        }

        // Add event listener for browser back/forward buttons
        window.addEventListener('popstate', async (event) => {
            await pollPeonData();
        });

        $(document).ready(async function() {
            console.log('Document ready');
            await pollPeonData();
            setInterval(pollPeonData, 5000);
        });


        </script>
		<div class="max-w-6xl mx-auto p-6">
			<div class="bg-gray-50 rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex justify-between items-center mb-6">
					<h1 class="text-2xl font-bold text-gray-700">All Peons</h1>
					<div class="flex">
						<div class="join grid grid-cols-2">
							<button onclick="prevPage()" class="join-item btn btn-outline">Previous page</button>
							<button onclick="nextPage()" class="join-item btn btn-outline">Next</button>
						</div>
					</div>
				</div>
				<div class="overflow-x-auto">
					<table class="min-w-full">
						<thead class="bg-gray-100">
							<tr>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Peon ID
								</th>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Status
								</th>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Last Heartbeat
								</th>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Queues
								</th>
								<th class="px-4 py-3 text-left text-sm font-semibold text-gray-900 border-b">
									Current Task
								</th>
							</tr>
						</thead>
						<tbody id="peons-table">
							<tr>
								<td colspan="5" class="text-center py-4 text-gray-500">
									Loading...
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
}
